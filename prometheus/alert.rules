groups:
- name: CPU rules
  interval: 1m
  rules:
  # The count of CPUs per node, useful for getting CPU time as a percent of total.
  - record: instance:node_cpus:count
    expr: >
      count without (cpu, mode) (
        node_cpu_seconds_total{mode="idle"}
      )
  # CPU in use by CPU.
  - record: instance_cpu:node_cpu_seconds_not_idle:rate1m
    expr: >
      sum without (mode) (
        rate(node_cpu_seconds_total{mode!="idle"}[1m])
      )
  # CPU in use by mode.
  - record: instance_mode:node_cpu_seconds:rate1m
    expr: >
      sum without (cpu) (
        rate(node_cpu_seconds_total[1m])
      )
  - record: instance_mode:node_cpu_seconds:rate5m
    expr: >
      sum without (cpu) (
        rate(node_cpu_seconds_total[5m])
      )
  # CPU in use ratio.
  - record: instance:node_cpu_utilization:ratio
    expr: >
      sum without (mode) (
        instance_mode:node_cpu_seconds:rate1m{mode!="idle"}
      ) / instance:node_cpus:count
  # CPU summaries
  - record: job:node_cpu_utilization:min_ratio
    expr: >
      min without (fqdn, instance) (
        instance:node_cpu_in_use:ratio
      )
  - record: job:node_cpu_utilization:avg_ratio
    expr: >
      avg without (fqdn, instance) (
        instance:node_cpu_in_use:ratio
      )
  - record: job:node_cpu_utilization:max_ratio
    expr: >
      max without (fqdn, instance) (
        instance:node_cpu_in_use:ratio
      )

  # CPU Alerts
- name: Old CPU rules
  rules:
  - record: instance:node_cpus:count
    expr: count(node_cpu_seconds_total{mode="idle"}) WITHOUT (cpu, mode)
  - record: instance_cpu:node_cpu_not_idle:rate5m
    expr: sum(rate(node_cpu_seconds_total{mode!="idle"}[5m])) WITHOUT (mode)
  - record: instance_mode:node_cpu:rate5m
    expr: sum(rate(node_cpu_seconds_total[5m])) WITHOUT (cpu)
  - record: instance:node_cpu_in_use:ratio
    expr: sum(instance_mode:node_cpu:rate5m{mode!="idle"}) WITHOUT (mode) / instance:node_cpus:count

# Rules for calculating and alerting on long-term node utilization issues.
- name: Utilization
  interval: 300s
  rules:
  - record: instance:cpu_utilization:ratio_max
    expr: max_over_time(instance:node_cpu_utilization:ratio[300s])
  - record: instance:cpu_utilization:ratio_avg
    expr: avg_over_time(instance:node_cpu_utilization:ratio[300s])
  - record: instance:cpu_utilization:ratio_q95
    expr: quantile_over_time(0.95, instance:node_cpu_utilization:ratio[300s])
  - record: instance:memory_utilization:ratio_max
    expr: max_over_time(instance:node_memory_utilization:ratio[300s])
  - record: instance:memory_utilization:ratio_avg
    expr: avg_over_time(instance:node_memory_utilization:ratio[300s])
  - record: instance:memory_utilization:ratio_q95
    expr: quantile_over_time(0.95, instance:node_memory_utilization:ratio[300s])
# TODO(bjk): This is a proposal for an alert. We should send this to a webhook that opens an issue.
#  - alert: NodeUnderUtilized
#    expr: >
#      (quantile_over_time(0.95, instance:cpu_utilization:ratio_q95[1d]) * 100 < 10)
#        and
#      (quantile_over_time(0.95, instance:memory_utilization:ratio_q95[1d]) * 100 < 10)
#    for: 7d

- name: Node memory
  rules:
  - record: instance:node_memory_available:ratio
    expr: >
      (
        node_memory_MemAvailable_bytes or
        (node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes)
      ) /
      node_memory_MemTotal_bytes
  - record: instance:node_memory_utilization:ratio
    expr: 1 - instance:node_memory_available:ratio

- name: Node filesystem rules
  rules:
  - record: instance:node_filesystem_avail:ratio
    expr: node_filesystem_avail_bytes{device=~"(/dev/.+|tank/dataset)"} / node_filesystem_size_bytes{device=~"(/dev/.+|tank/dataset)"}
  - record: instance:node_disk_writes_completed:irate1m
    expr: sum(irate(node_disk_writes_completed_total{device=~"sd.*"}[1m])) WITHOUT (device)
  - record: instance:node_disk_reads_completed:irate1m
    expr: sum(irate(node_disk_reads_completed_total{device=~"sd.*"}[1m])) WITHOUT (device)
  
